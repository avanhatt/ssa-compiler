@ARTICLE{xeonphi, 
author={A. Sodani and R. Gramunt and J. Corbal and H. Kim and K. Vinod and S. Chinthamani and S. Hutsell and R. Agarwal and Y. Liu}, 
journal={IEEE Micro}, 
title={{Knights Landing}: Second-Generation {Intel} {Xeon} {Phi} Product}, 
year={2016}, 
volume={36}, 
number={2}, 
pages={34-46}, 
keywords={instruction sets;integrated circuit interconnections;microprocessor chips;Knights Landing;second generation Intel Xeon Phi product;high-performance computing;parallel workload;memory bandwidth;Knights Corner;self-booting standard CPU;Intel Xeon processor;power efficiency;vector instruction set;memory architecture;on-die interconnect;integrated on-package network fabric;word length 512 bit;Graphics processing units;Bandwidth allocation;Microprocessors;Program processors;Computer architecture;Resource management;Central Processing Unit;Memory architecture;Knights Landing;Intel Xeon Phi;parallel computing;high-performance computing}, 
doi={10.1109/MM.2016.25}, 
ISSN={0272-1732}, 
month={Mar},}

@article{chlorophyll,
 author = {Phothilimthana, Phitchaya Mangpo and Jelvis, Tikhon and Shah, Rohin and Totla, Nishant and Chasins, Sarah and Bodik, Rastislav},
 title = {Chlorophyll: Synthesis-aided Compiler for Low-power Spatial Architectures},
 journal = {SIGPLAN Not.},
 issue_date = {June 2014},
 volume = {49},
 number = {6},
 month = jun,
 year = {2014},
 issn = {0362-1340},
 pages = {396--407},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2666356.2594339},
 doi = {10.1145/2666356.2594339},
 acmid = {2594339},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {program synthesis, spatial architectures},
}
@article{raw,
 author = {Lee, Walter and Barua, Rajeev and Frank, Matthew and Srikrishna, Devabhaktuni and Babb, Jonathan and Sarkar, Vivek and Amarasinghe, Saman},
 title = {Space-time Scheduling of Instruction-level Parallelism on a Raw Machine},
 journal = {SIGOPS Oper. Syst. Rev.},
 issue_date = {Dec. 1998},
 volume = {32},
 number = {5},
 month = oct,
 year = {1998},
 issn = {0163-5980},
 pages = {46--57},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/384265.291018},
 doi = {10.1145/384265.291018},
 acmid = {291018},
 publisher = {ACM},
 address = {New York, NY, USA},
}
@article{tvm,
  author    = {Tianqi Chen and
               Thierry Moreau and
               Ziheng Jiang and
               Haichen Shen and
               Eddie Q. Yan and
               Leyuan Wang and
               Yuwei Hu and
               Luis Ceze and
               Carlos Guestrin and
               Arvind Krishnamurthy},
  title     = {{TVM:} {E}nd-to-End Optimization Stack for Deep Learning},
  journal   = {CoRR},
  volume    = {abs/1802.04799},
  year      = {2018},
  url       = {http://arxiv.org/abs/1802.04799},
  archivePrefix = {arXiv},
  eprint    = {1802.04799},
  timestamp = {Mon, 13 Aug 2018 16:47:02 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1802-04799},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@InProceedings{optgen,
author="Buchwald, Sebastian",
editor="Franke, Bj{\"o}rn",
title="Optgen: A Generator for Local Optimizations",
booktitle="Compiler Construction",
year="2015",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="171--189",
abstract="Every compiler comes with a set of local optimization rules, such as x + 0 {\textrightarrow} x and x {\&} x {\textrightarrow} x, that do not require any global analysis. These rules reflect the wisdom of the compiler developers about mathematical identities that hold for the operations of their intermediate representation. Unfortunately, these sets of hand-crafted rules guarantee neither correctness nor completeness. Optgen solves this problem by generating all local optimizations up to a given cost limit. Since Optgen verifies each rule using an SMT solver, it guarantees correctness and completeness of the generated rule set. Using Optgen, we tested the latest versions of gcc, icc and llvm and identified more than 50 missing local optimizations that involve only two operations.",
isbn="978-3-662-46663-6"
}
@article{ilp,
 author = {Nowatzki, Tony and Sartin-Tarm, Michael and De Carli, Lorenzo and Sankaralingam, Karthikeyan and Estan, Cristian and Robatmili, Behnam},
 title = {A General Constraint-centric Scheduling Framework for Spatial Architectures},
 journal = {SIGPLAN Not.},
 issue_date = {June 2013},
 volume = {48},
 number = {6},
 month = jun,
 year = {2013},
 issn = {0362-1340},
 pages = {495--506},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2499370.2462163},
 doi = {10.1145/2499370.2462163},
 acmid = {2462163},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {integer linear programming, spatial architecture scheduling, spatial architectures},
}
@article{alive,
 author = {Lopes, Nuno P. and Menendez, David and Nagarakatte, Santosh and Regehr, John},
 title = {Provably Correct Peephole Optimizations with {Alive}},
 journal = {SIGPLAN Not.},
 issue_date = {June 2015},
 volume = {50},
 number = {6},
 month = jun,
 year = {2015},
 issn = {0362-1340},
 pages = {22--32},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2813885.2737965},
 doi = {10.1145/2813885.2737965},
 acmid = {2737965},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Alive, Compiler Verification, Peephole Optimization},
}
@techreport{risc-v,
    Author = {Asanovic, Krste and Patterson, David A.},
    Title = {Instruction Sets Should Be Free: The Case For {RISC-V}},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2014},
    Month = {Aug},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-146.html},
    Number = {UCB/EECS-2014-146},
}
@misc{future,
    title={Future Directions for Optimizing Compilers},
    author={Nuno P. Lopes and John Regehr},
    year={2018},
    eprint={1809.02161},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}
@article{souper,
  author    = {Raimondas Sasnauskas and
               Yang Chen and
               Peter Collingbourne and
               Jeroen Ketema and
               Jubi Taneja and
               John Regehr},
  title     = {Souper: {A} Synthesizing Superoptimizer},
  journal   = {CoRR},
  volume    = {abs/1711.04422},
  year      = {2017},
  url       = {http://arxiv.org/abs/1711.04422},
  archivePrefix = {arXiv},
  eprint    = {1711.04422},
  timestamp = {Mon, 13 Aug 2018 16:48:06 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1711-04422},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@InProceedings{z3,
author="de Moura, Leonardo
and Bj{\o}rner, Nikolaj",
editor="Ramakrishnan, C. R.
and Rehof, Jakob",
title="Z3: An Efficient {SMT} Solver",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="337--340",
abstract="Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.",
isbn="978-3-540-78800-3"
}

@inproceedings{halide,
 author = {Ragan-Kelley, Jonathan and Barnes, Connelly and Adams, Andrew and Paris, Sylvain and Durand, Fr{\'e}do and Amarasinghe, Saman},
 title = {{Halide}: A Language and Compiler for Optimizing Parallelism, Locality, and Recomputation in Image Processing Pipelines},
 booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '13},
 year = {2013},
 isbn = {978-1-4503-2014-6},
 location = {Seattle, Washington, USA},
 pages = {519--530},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2491956.2462176},
 doi = {10.1145/2491956.2462176},
 acmid = {2462176},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {autotuning, compiler, domain specific language, gpu, image processing, locality, optimization, parallelism, redundant computation, vectorization},
} 