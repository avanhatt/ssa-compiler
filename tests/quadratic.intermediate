; ModuleID = '<stdin>'
source_filename = "tests/quadratic.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.1 = private unnamed_addr constant [22 x i8] c"quadratic result: %f\0A\00", align 1
@str = private unnamed_addr constant [14 x i8] c"starting main\00", align 1

; Function Attrs: nounwind uwtable
define dso_local double @_p_quadratic(double, double, double) local_unnamed_addr #0 {
  %4 = fmul double %1, %1, !partition !2, !start !3, !end !4
  %5 = fmul double %0, 4.000000e+00, !partition !2, !start !5, !end !6
  %6 = fmul double %5, %2, !partition !7, !start !8, !end !9
  %7 = fsub double %4, %6, !partition !7, !start !6, !end !10
  %8 = fmul double %0, 2.000000e+00, !partition !7, !start !10, !end !3
  %9 = tail call i32 @sleep(i32 1) #4, !partition !2, !start !11, !end !9
  %10 = tail call i32 @sleep(i32 1) #4, !partition !2, !start !12, !end !13
  %11 = tail call i32 @sleep(i32 1) #4, !partition !2, !start !14, !end !3
  %12 = tail call i32 @sleep(i32 1) #4, !partition !2, !start !13, !end !11
  %13 = tail call i32 @sleep(i32 1) #4, !partition !2, !start !4, !end !12
  %14 = tail call i32 @sleep(i32 1) #4, !partition !7, !start !3, !end !15
  %15 = tail call i32 @sleep(i32 1) #4, !partition !7, !start !15, !end !16
  %16 = tail call i32 @sleep(i32 1) #4, !partition !7, !start !13, !end !11
  %17 = fsub double -0.000000e+00, %1, !partition !2, !start !7, !end !5
  %18 = tail call double @sqrt(double %7) #4, !partition !7, !start !2, !end !6
  %19 = fsub double %18, %1, !partition !7, !start !16, !end !13
  %20 = fdiv double %19, %8, !partition !2, !start !9, !end !17
  %21 = tail call double @sqrt(double %7) #4, !partition !2, !start !17, !end !18
  %22 = fsub double %17, %21, !partition !7, !start !17, !end !19
  %23 = fdiv double %22, %8, !partition !7, !start !9, !end !17
  %24 = fcmp une double %20, 0.000000e+00, !partition !7, !start !11, !end !8
  %25 = select i1 %24, double %20, double %23, !partition !7, !start !7, !end !2
  ret double %25, !partition !7, !start !19, !end !18
}

declare dso_local i32 @sleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare dso_local double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #0 {
  %3 = tail call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str, i64 0, i64 0))
  %4 = getelementptr inbounds i8*, i8** %1, i64 1
  %5 = load i8*, i8** %4, align 8, !tbaa !20
  %6 = tail call i32 @atoi(i8* %5) #5
  %7 = sitofp i32 %6 to double
  %8 = getelementptr inbounds i8*, i8** %1, i64 2
  %9 = load i8*, i8** %8, align 8, !tbaa !20
  %10 = tail call i32 @atoi(i8* %9) #5
  %11 = sitofp i32 %10 to double
  %12 = getelementptr inbounds i8*, i8** %1, i64 3
  %13 = load i8*, i8** %12, align 8, !tbaa !20
  %14 = tail call i32 @atoi(i8* %13) #5
  %15 = sitofp i32 %14 to double
  %16 = tail call double @_p_quadratic(double %7, double %11, double %15)
  %17 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), double %16)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally dso_local i32 @atoi(i8* nonnull) local_unnamed_addr #3 {
  %2 = tail call i64 @strtol(i8* nocapture nonnull %0, i8** null, i32 10) #4
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0-3~ubuntu18.04.1 (tags/RELEASE_800/final)"}
!2 = !{!"1"}
!3 = !{!"8"}
!4 = !{!"10"}
!5 = !{!"2"}
!6 = !{!"4"}
!7 = !{!"0"}
!8 = !{!"20"}
!9 = !{!"22"}
!10 = !{!"6"}
!11 = !{!"19"}
!12 = !{!"13"}
!13 = !{!"16"}
!14 = !{!"5"}
!15 = !{!"11"}
!16 = !{!"14"}
!17 = !{!"25"}
!18 = !{!"28"}
!19 = !{!"27"}
!20 = !{!21, !21, i64 0}
!21 = !{!"any pointer", !22, i64 0}
!22 = !{!"omnipotent char", !23, i64 0}
!23 = !{!"Simple C/C++ TBAA"}
